name: Publish draft release

on:
  workflow_dispatch:  

permissions:
  contents: write
  pull-requests: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4


      - name: Get latest draft release
        id: draft
        run: |
          draft_info=$(gh release list --limit 5 --json tagName,isDraft --jq '.[] | select(.isDraft==true) | .tagName' | head -n1)
          echo "tag_name=${draft_info}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate draft version
        run: |
          if [ -z "${{ steps.draft.outputs.tag_name }}" ]; then
            echo "No draft release found!" >&2
            exit 1
          fi
          echo "Found draft version: ${{ steps.draft.outputs.tag_name }}"


      - name: Create branch and commit VERSION
        run: |
            branch="update-version-${{ steps.draft.outputs.tag_name }}"
            git push origin --delete "$branch" || echo "No remote branch to delete"
            git fetch origin main
            git checkout -b "$branch" origin/main
            version="${{ steps.draft.outputs.tag_name }}"
            echo "$version" | sed 's/^v//' > VERSION
            echo "# generated at $(date +%s)" >> VERSION
            git add VERSION
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: add VERSION $version" || echo "No changes"
            git push --set-upstream origin "$branch"

#      - name: Create pull request
#        id: pr
#        uses: peter-evans/create-pull-request@v6
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          branch: "update-version-${{ steps.draft.outputs.tag_name }}"
#          base: main
#          title: "chore: add VERSION ${{ steps.draft.outputs.tag_name }}"
#          body: "This PR adds or updates the VERSION file for ${{ steps.draft.outputs.tag_name }}"
#          labels: automated


      - name: Auto-merge PR
        uses: peter-evans/enable-pull-request-automerge@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.pr.outputs.pull-request-number }}
          merge-method: squash

      - name: Wait for PR merge
        uses: actions/github-script@v7
        with:
          script: |
            const prNum = parseInt("${{ steps.pr.outputs.pull-request-number }}")
            let merged = false
            const maxRetries = 20
            let tries = 0
            while(!merged && tries < maxRetries){
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNum
              })
              merged = pr.data.merged
              if(!merged){
                tries++
                console.log("Waiting for PR to merge...")
                await new Promise(r => setTimeout(r, 5000))
              }
            }
            if(!merged) throw new Error("PR not merged in time")

#      - name: Create tag
#        run: |
#          git tag "${{ steps.draft.outputs.tag_name }}"
#          git push origin "${{ steps.draft.outputs.tag_name }}"
#
#      - name: Publish draft release
#        run: gh release edit "${{ steps.draft.outputs.tag_name }}" --draft=false
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
